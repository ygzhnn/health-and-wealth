# -*- coding: utf-8 -*-
"""generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l1vtRYH1Ie-WHSdG--Ry9QcN3l-iDYW5
"""

from google import genai
from google.genai import types
from PIL import Image
from io import BytesIO
import json
import base64
import os

# --- Configuration ---
api_key = os.getenv("GOOGLE_API_KEY", "AIzaSyDSXdySoGPfQcxoD51vtFK2xxjhMMfczeY")  # Better security
image_path = '/content/test.jpg'
json_path = '/content/indoor_wellbeing_analysis.json'

# --- Load image and convert to base64 ---
with open(image_path, "rb") as img_file:
    image_bytes = img_file.read()

image_part = types.Part(
    inline_data=types.Blob(
        mime_type="image/jpeg",  # or image/png if applicable
        data=image_bytes
    )
)

# --- Load JSON and construct prompt ---
with open(json_path, 'r') as f:
    data = json.load(f)

suggestions = data.get('improvement_suggestions', [])
suggestion_text = "Please generate a reference image for a room with the following improvements:\n"
suggestion_text += '\n'.join(f"- {s}" for s in suggestions)

prompt_text = (
    "This is a photo of a real room. Based on the suggestions below, "
    "create a new reference image that incorporates these improvements:\n"
    f"{suggestion_text}"
)

text_part = types.Part(text=prompt_text)

# --- Initialize client ---
client = genai.Client(api_key=api_key)

# --- Send request to Gemini ---
response = client.models.generate_content(
    model="gemini-2.0-flash-preview-image-generation",
    contents=[types.Content(parts=[text_part, image_part])],
    config=types.GenerateContentConfig(
        response_modalities=["TEXT", "IMAGE"]
    )
)

# --- Handle and display response ---
for part in response.candidates[0].content.parts:
    if hasattr(part, "text") and part.text:
        print("Description:\n", part.text)
    elif hasattr(part, "inline_data") and part.inline_data:
        try:
            result_image = Image.open(BytesIO(part.inline_data.data))
            result_image.save("output_reference_image.png")
            result_image.show()
            print("Saved output_reference_image.png")
        except Exception as e:
            print("Error loading image:", e)

